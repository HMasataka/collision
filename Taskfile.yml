version: "3"

vars:
  BINARY_NAME: collision
  CLIENT_BINARY_NAME: simpleticket
  BUILD_DIR: ./bin
  MAIN_FILE: ./cmd/collision/main.go
  CLIENT_MAIN_FILE: ./cmd/simpleticket

tasks:
  default:
    desc: Show available tasks
    cmds:
      - task --list

  build:
    desc: Build both collision server and simpleticket client
    cmds:
      - mkdir -p {{.BUILD_DIR}}
      - go build -o {{.BUILD_DIR}}/{{.BINARY_NAME}} {{.MAIN_FILE}}
      - go build -o {{.BUILD_DIR}}/{{.CLIENT_BINARY_NAME}} {{.CLIENT_MAIN_FILE}}
    sources:
      - "**/*.go"
    generates:
      - "{{.BUILD_DIR}}/{{.BINARY_NAME}}"
      - "{{.BUILD_DIR}}/{{.CLIENT_BINARY_NAME}}"

  build-all:
    desc: Build binaries for multiple platforms
    env:
      GOOS: linux
      GOARCH: amd64
    cmds:
      - mkdir -p {{.BUILD_DIR}}
      # Build collision server for multiple platforms
      - GOOS=linux GOARCH=amd64 go build -o {{.BUILD_DIR}}/{{.BINARY_NAME}}-linux-amd64 {{.MAIN_FILE}}
      - GOOS=darwin GOARCH=amd64 go build -o {{.BUILD_DIR}}/{{.BINARY_NAME}}-darwin-amd64 {{.MAIN_FILE}}
      - GOOS=darwin GOARCH=arm64 go build -o {{.BUILD_DIR}}/{{.BINARY_NAME}}-darwin-arm64 {{.MAIN_FILE}}
      - GOOS=windows GOARCH=amd64 go build -o {{.BUILD_DIR}}/{{.BINARY_NAME}}-windows-amd64.exe {{.MAIN_FILE}}
      # Build simpleticket client for multiple platforms
      - GOOS=linux GOARCH=amd64 go build -o {{.BUILD_DIR}}/{{.CLIENT_BINARY_NAME}}-linux-amd64 {{.CLIENT_MAIN_FILE}}
      - GOOS=darwin GOARCH=amd64 go build -o {{.BUILD_DIR}}/{{.CLIENT_BINARY_NAME}}-darwin-amd64 {{.CLIENT_MAIN_FILE}}
      - GOOS=darwin GOARCH=arm64 go build -o {{.BUILD_DIR}}/{{.CLIENT_BINARY_NAME}}-darwin-arm64 {{.CLIENT_MAIN_FILE}}
      - GOOS=windows GOARCH=amd64 go build -o {{.BUILD_DIR}}/{{.CLIENT_BINARY_NAME}}-windows-amd64.exe {{.CLIENT_MAIN_FILE}}

  run:
    desc: "Run the collision server (usage: task run -- <args>)"
    cmds:
      - go run {{.MAIN_FILE}} {{.CLI_ARGS}}

  run-client:
    desc: "Run the simpleticket client (usage: task run-client -- <args>)"
    cmds:
      - go run {{.CLIENT_MAIN_FILE}} {{.CLI_ARGS}}

  clean:
    desc: Clean build artifacts
    cmds:
      - rm -rf {{.BUILD_DIR}}
      - rm -f {{.BINARY_NAME}}
      - rm -f {{.CLIENT_BINARY_NAME}}

  test:
    desc: Run tests
    cmds:
      - go test -v ./...

  fmt:
    desc: Format Go code
    cmds:
      - go fmt ./...

  vet:
    desc: Run go vet
    cmds:
      - go vet ./...

  mod-tidy:
    desc: Tidy go modules
    cmds:
      - go mod tidy

  install:
    desc: Install the binary to GOPATH/bin
    deps: [build]
    cmds:
      - go install {{.MAIN_FILE}}

  dev:
    desc: Development workflow - build and run
    cmds:
      - task: build
      - "{{.BUILD_DIR}}/{{.BINARY_NAME}}"

  check:
    desc: Run all checks (fmt, vet, test)
    cmds:
      - task: fmt
      - task: vet
      - task: test

  pre:
    cmds:
      - mkdir -p gen/pb

  proto:
    deps:
      - pre
    desc: Generate Go files from proto definitions
    cmds:
      - protoc --proto_path=api --go_out=gen/pb --go_opt=paths=source_relative --go-grpc_out=gen/pb --go-grpc_opt=paths=source_relative messages.proto
      - protoc --proto_path=api --go_out=gen/pb --go_opt=paths=source_relative --go-grpc_out=gen/pb --go-grpc_opt=paths=source_relative frontend.proto
    sources:
      - "api/*.proto"
    generates:
      - "gen/pb/*.go"
